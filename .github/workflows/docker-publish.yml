name: Publish events-db-migration to GHCR

on:
  push:
    branches: [ main ]

permissions:
  contents: read
  packages: write

env:
  IMAGE_NAME: ghcr.io/darc-software/events-db-migration

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container
          install: true

      - name: Build & Push (latest, main, sha)
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:latest
            ${{ env.IMAGE_NAME }}:main
            ${{ env.IMAGE_NAME }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: false

  deploy-migration:
    name: Deploy migration over SSH
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Run helm upgrade on server
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.K3S_HOST }}
          username: ${{ secrets.K3S_USER }}
          key: ${{ secrets.K3S_SSH_KEY }}
          port: ${{ secrets.SSH_PORT || 22 }}
          script_stop: true
          envs: GITHUB_SHA
          script: |
            set -euo pipefail
            export KUBECONFIG="$HOME/.kube/config"

            echo "KUBECONFIG -> $KUBECONFIG"
            ls -l "$KUBECONFIG"

            kubectl version --client=true
            kubectl cluster-info
            kubectl get nodes

            # If your helm-values repo is on the server, update it
            if [ -d "$HOME/helm-values/.git" ]; then
              cd "$HOME/helm-values"
              git pull --ff-only || true
            else
              cd "$HOME/helm-values"
            fi

            # Clean any previous Job (name may differ), then upgrade/install
            kubectl -n data delete job -l app.kubernetes.io/instance=events-db-migration --ignore-not-found

            helm upgrade --install events-db-migration ./charts/events-db-migration \
              -n data \
              -f releases/data/events-db-migration/values.yaml \
              --set image.tag=${GITHUB_SHA}

            # Find the actual Job name created by Helm
            echo "Resolving Job name..."
            for i in {1..30}; do
              JOB_NAME=$(kubectl -n data get jobs \
                -l app.kubernetes.io/instance=events-db-migration \
                -o jsonpath='{.items[0].metadata.name}' 2>/dev/null || true)
              if [ -n "${JOB_NAME:-}" ]; then
                echo "Found Job: $JOB_NAME"
                break
              fi
              echo "Waiting for Job to appear ($i/30)..."
              sleep 2
            done
            if [ -z "${JOB_NAME:-}" ]; then
              echo "ERROR: No Job found with instance=events-db-migration"
              kubectl -n data get jobs -o wide || true
              exit 1
            fi

            # Wait for completion and show logs from the Job's Pod(s)
            if ! kubectl -n data wait --for=condition=complete --timeout=15m job/${JOB_NAME}; then
              echo "Job did not complete successfully. Describing:"
              kubectl -n data describe job/${JOB_NAME} || true
              echo "Pods:"
              kubectl -n data get pods -l job-name=${JOB_NAME} -o wide || true
              echo "Logs:"
              kubectl -n data logs -l job-name=${JOB_NAME} --all-containers --tail=-1 || true
              exit 1
            fi

            # Success logs
            kubectl -n data logs -l job-name=${JOB_NAME} --all-containers --tail=-1