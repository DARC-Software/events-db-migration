name: Publish events-db-migration to GHCR

on:
  push:
    branches: [ main ]

permissions:
  contents: read
  packages: write

env:
  IMAGE_NAME: ghcr.io/darc-software/events-db-migration

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container
          install: true

      - name: Build & Push (latest, main, sha)
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:latest
            ${{ env.IMAGE_NAME }}:main
            ${{ env.IMAGE_NAME }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: false

  deploy-migration:
    name: Deploy migration on k3s (via SSH)
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Run helm upgrade on server
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.K3S_HOST }}
          username: ${{ secrets.K3S_USER }}
          key: ${{ secrets.K3S_SSH_KEY }}
          port: ${{ secrets.SSH_PORT || 22 }}
          script_stop: true
          script: |
            set -euo pipefail

            # Use the user's kubeconfig (you already fixed its perms)
            export KUBECONFIG="$HOME/.kube/config"
            kubectl cluster-info >/dev/null

            # Paths to your on-server repo content
            CHART_DIR="$HOME/helm-values/charts/events-db-migration"
            VALUES_FILE="$HOME/helm-values/releases/data/events-db-migration/values.yaml"

            # Safety: ensure the chart & values exist
            test -d "$CHART_DIR" || { echo "Chart not found: $CHART_DIR"; exit 1; }
            test -f "$VALUES_FILE" || { echo "Values not found: $VALUES_FILE"; exit 1; }

            # If the same Job ran before, remove it (Jobs are immutable)
            kubectl -n data delete job events-db-migration --ignore-not-found

            # Deploy with the image tag you just pushed
            # If your chart supports flipping hooks, keep runAsHook=false so the Job is a normal resource
            helm upgrade --install events-db-migration "$CHART_DIR" \
              -n data \
              -f "$VALUES_FILE" \
              --set image.tag=main \
              --set job.runAsHook=false

            # Resolve the Job name by Helm labels
            echo "Resolving Job name..."
            for i in $(seq 1 30); do
              JOB_NAME="$(kubectl -n data get jobs \
                -l app.kubernetes.io/instance=events-db-migration \
                -o jsonpath='{.items[0].metadata.name}' 2>/dev/null || true)"
              [ -n "${JOB_NAME:-}" ] && break
              echo "Waiting for Job to appear ($i/30)..."
              sleep 2
            done
            [ -n "${JOB_NAME:-}" ] || { echo "ERROR: No Job found (instance=events-db-migration)"; kubectl -n data get jobs; exit 1; }

            echo "Job detected: $JOB_NAME â€” waiting for completion..."
            if ! kubectl -n data wait --for=condition=complete --timeout=15m "job/${JOB_NAME}"; then
              echo "Job did not complete successfully. Dumping describe and logs:"
              kubectl -n data describe "job/${JOB_NAME}" || true
              # Print pod logs even if failed
              PODS=$(kubectl -n data get pods -l job-name="${JOB_NAME}" -o name)
              for p in $PODS; do
                echo "---- LOGS for $p ----"
                kubectl -n data logs "$p" --all-containers=true || true
              done
              exit 1
            fi

            # Success path: print logs
            kubectl -n data logs "job/${JOB_NAME}"